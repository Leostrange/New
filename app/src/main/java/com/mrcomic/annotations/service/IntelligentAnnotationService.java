package com.example.mrcomic.annotations.service;

import android.content.Context;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import com.example.mrcomic.annotations.model.Annotation;
import com.example.mrcomic.annotations.types.AnnotationType;
import com.example.mrcomic.annotations.types.AnnotationPriority;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

/**
 * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
 */
public class IntelligentAnnotationService {
    
    private final AnnotationService annotationService;
    private final ExecutorService executorService;
    private final MutableLiveData<String> analysisStatusLiveData;
    private final Context context;
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
    private static final Pattern QUESTION_PATTERN = Pattern.compile(".*[?Ôºü]\\s*$");
    private static final Pattern EXCLAMATION_PATTERN = Pattern.compile(".*[!ÔºÅ]\\s*$");
    private static final Pattern IMPORTANT_PATTERN = Pattern.compile(".*(–≤–∞–∂–Ω–æ|–≤–∞–∂–Ω—ã–π|–∫—Ä–∏—Ç–∏—á–Ω–æ|—Å—Ä–æ—á–Ω–æ|–≤–Ω–∏–º–∞–Ω–∏–µ).*", Pattern.CASE_INSENSITIVE);
    private static final Pattern TODO_PATTERN = Pattern.compile(".*(todo|—Å–¥–µ–ª–∞—Ç—å|–∑–∞–¥–∞—á–∞|–Ω—É–∂–Ω–æ).*", Pattern.CASE_INSENSITIVE);
    private static final Pattern IDEA_PATTERN = Pattern.compile(".*(–∏–¥–µ—è|–º—ã—Å–ª—å|–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ|–∫–æ–Ω—Ü–µ–ø—Ü–∏—è).*", Pattern.CASE_INSENSITIVE);
    
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    private static final Map<String, List<String>> CATEGORY_KEYWORDS = new HashMap<>();
    static {
        CATEGORY_KEYWORDS.put("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏", Arrays.asList("–ø–µ—Ä—Å–æ–Ω–∞–∂", "–≥–µ—Ä–æ–π", "–∑–ª–æ–¥–µ–π", "–ø—Ä–æ—Ç–∞–≥–æ–Ω–∏—Å—Ç", "–∞–Ω—Ç–∞–≥–æ–Ω–∏—Å—Ç", "—Ö–∞—Ä–∞–∫—Ç–µ—Ä"));
        CATEGORY_KEYWORDS.put("–°—é–∂–µ—Ç", Arrays.asList("—Å—é–∂–µ—Ç", "–∏—Å—Ç–æ—Ä–∏—è", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–ø–æ–≤–æ—Ä–æ—Ç", "–∫—É–ª—å–º–∏–Ω–∞—Ü–∏—è", "—Ä–∞–∑–≤—è–∑–∫–∞"));
        CATEGORY_KEYWORDS.put("–î–∏–∞–ª–æ–≥–∏", Arrays.asList("–¥–∏–∞–ª–æ–≥", "—Ä–∞–∑–≥–æ–≤–æ—Ä", "—Ä–µ—á—å", "—Å–ª–æ–≤–∞", "—Ñ—Ä–∞–∑–∞", "—Ä–µ–ø–ª–∏–∫–∞"));
        CATEGORY_KEYWORDS.put("–í–∏–∑—É–∞–ª", Arrays.asList("—Ä–∏—Å—É–Ω–æ–∫", "–∞—Ä—Ç", "—Å—Ç–∏–ª—å", "—Ü–≤–µ—Ç", "–∫–æ–º–ø–æ–∑–∏—Ü–∏—è", "–∫–∞–¥—Ä"));
        CATEGORY_KEYWORDS.put("–≠–º–æ—Ü–∏–∏", Arrays.asList("—ç–º–æ—Ü–∏—è", "—á—É–≤—Å—Ç–≤–æ", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–≥—Ä—É—Å—Ç—å", "—Ä–∞–¥–æ—Å—Ç—å", "–∑–ª–æ—Å—Ç—å"));
        CATEGORY_KEYWORDS.put("–î–µ–π—Å—Ç–≤–∏–µ", Arrays.asList("–¥–µ–π—Å—Ç–≤–∏–µ", "–¥–≤–∏–∂–µ–Ω–∏–µ", "–±–æ–π", "—Å—Ü–µ–Ω–∞", "—Å–æ–±—ã—Ç–∏–µ", "–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç"));
        CATEGORY_KEYWORDS.put("–õ–æ–∫–∞—Ü–∏—è", Arrays.asList("–º–µ—Å—Ç–æ", "–ª–æ–∫–∞—Ü–∏—è", "—Ñ–æ–Ω", "–æ–∫—Ä—É–∂–µ–Ω–∏–µ", "–æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞", "–¥–µ–∫–æ—Ä–∞—Ü–∏–∏"));
        CATEGORY_KEYWORDS.put("–¢–µ—Ö–Ω–∏–∫–∞", Arrays.asList("—Ç–µ—Ö–Ω–∏–∫–∞", "–º–µ—Ç–æ–¥", "–ø—Ä–∏–µ–º", "—Å—Ç–∏–ª—å", "–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ", "–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ"));
    }
    
    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    private static final Map<String, String> EMOTION_INDICATORS = new HashMap<>();
    static {
        EMOTION_INDICATORS.put("—Ä–∞–¥–æ—Å—Ç—å", "üòä");
        EMOTION_INDICATORS.put("–≥—Ä—É—Å—Ç—å", "üò¢");
        EMOTION_INDICATORS.put("–∑–ª–æ—Å—Ç—å", "üò†");
        EMOTION_INDICATORS.put("—É–¥–∏–≤–ª–µ–Ω–∏–µ", "üò≤");
        EMOTION_INDICATORS.put("—Å—Ç—Ä–∞—Ö", "üò®");
        EMOTION_INDICATORS.put("–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ", "ü§¢");
        EMOTION_INDICATORS.put("–ª—é–±–æ–≤—å", "‚ù§Ô∏è");
        EMOTION_INDICATORS.put("—Å–º–µ—Ö", "üòÇ");
        EMOTION_INDICATORS.put("–≤–æ—Å—Ç–æ—Ä–≥", "ü§©");
        EMOTION_INDICATORS.put("–ø–µ—á–∞–ª—å", "üòî");
    }
    
    private static volatile IntelligentAnnotationService INSTANCE;
    
    private IntelligentAnnotationService(Context context) {
        this.context = context.getApplicationContext();
        this.annotationService = AnnotationService.getInstance(context);
        this.executorService = Executors.newFixedThreadPool(3);
        this.analysisStatusLiveData = new MutableLiveData<>();
    }
    
    public static IntelligentAnnotationService getInstance(Context context) {
        if (INSTANCE == null) {
            synchronized (IntelligentAnnotationService.class) {
                if (INSTANCE == null) {
                    INSTANCE = new IntelligentAnnotationService(context);
                }
            }
        }
        return INSTANCE;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –∏–∑ OCR
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR
     */
    public void createAnnotationsFromOCR(String comicId, int pageNumber, List<OCRResult> ocrResults, 
                                       String authorId, ServiceCallback<List<Long>> callback) {
        
        executorService.execute(() -> {
            try {
                analysisStatusLiveData.postValue("–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR...");
                
                List<Annotation> annotations = new ArrayList<>();
                
                for (OCRResult ocrResult : ocrResults) {
                    if (ocrResult.confidence > 0.8 && ocrResult.text.length() > 3) {
                        Annotation annotation = createAnnotationFromOCR(comicId, pageNumber, ocrResult, authorId);
                        if (annotation != null) {
                            annotations.add(annotation);
                        }
                    }
                }
                
                if (!annotations.isEmpty()) {
                    annotationService.createBatchAnnotations(annotations, new AnnotationService.ServiceCallback<List<Long>>() {
                        @Override
                        public void onSuccess(List<Long> result) {
                            analysisStatusLiveData.postValue("–°–æ–∑–¥–∞–Ω–æ " + result.size() + " –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –∏–∑ OCR");
                            if (callback != null) callback.onSuccess(result);
                        }
                        
                        @Override
                        public void onError(String message, Exception e) {
                            analysisStatusLiveData.postValue("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π: " + message);
                            if (callback != null) callback.onError(message, e);
                        }
                    });
                } else {
                    analysisStatusLiveData.postValue("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π");
                    if (callback != null) callback.onSuccess(new ArrayList<>());
                }
                
            } catch (Exception e) {
                analysisStatusLiveData.postValue("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ OCR: " + e.getMessage());
                if (callback != null) callback.onError("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ OCR", e);
            }
        });
    }
    
    private Annotation createAnnotationFromOCR(String comicId, int pageNumber, OCRResult ocrResult, String authorId) {
        Annotation annotation = new Annotation(comicId, pageNumber, AnnotationType.OCR_GENERATED);
        annotation.setContent(ocrResult.text);
        annotation.setTitle("OCR: " + truncateText(ocrResult.text, 30));
        annotation.setX(ocrResult.boundingBox.left);
        annotation.setY(ocrResult.boundingBox.top);
        annotation.setWidth(ocrResult.boundingBox.width());
        annotation.setHeight(ocrResult.boundingBox.height());
        annotation.setAuthorId(authorId);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        AnalysisResult analysis = analyzeText(ocrResult.text);
        annotation.setCategory(analysis.category);
        annotation.setPriority(analysis.priority);
        annotation.setTags(analysis.tags);
        annotation.setColor(analysis.color);
        annotation.setBackgroundColor(analysis.backgroundColor);
        
        return annotation;
    }
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –∫–æ–º–∏–∫—Å–∞
     */
    public void extractKeyMoments(String comicId, ServiceCallback<List<KeyMoment>> callback) {
        executorService.execute(() -> {
            try {
                analysisStatusLiveData.postValue("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤...");
                
                annotationService.getAnnotationsByComic(comicId).observeForever(annotations -> {
                    List<KeyMoment> keyMoments = new ArrayList<>();
                    
                    for (Annotation annotation : annotations) {
                        if (isKeyMoment(annotation)) {
                            KeyMoment moment = createKeyMoment(annotation);
                            keyMoments.add(moment);
                        }
                    }
                    
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    keyMoments.sort((a, b) -> {
                        int priorityCompare = b.importance - a.importance;
                        if (priorityCompare != 0) return priorityCompare;
                        return Integer.compare(a.pageNumber, b.pageNumber);
                    });
                    
                    analysisStatusLiveData.postValue("–ù–∞–π–¥–µ–Ω–æ " + keyMoments.size() + " –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤");
                    if (callback != null) callback.onSuccess(keyMoments);
                });
                
            } catch (Exception e) {
                analysisStatusLiveData.postValue("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤: " + e.getMessage());
                if (callback != null) callback.onError("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤", e);
            }
        });
    }
    
    private boolean isKeyMoment(Annotation annotation) {
        String content = annotation.getContent().toLowerCase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∞–∂–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        if (annotation.getPriority() == AnnotationPriority.HIGH || 
            annotation.getPriority() == AnnotationPriority.HIGHEST ||
            annotation.getPriority() == AnnotationPriority.CRITICAL) {
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if (IMPORTANT_PATTERN.matcher(content).matches() ||
            content.contains("–ø–æ–≤–æ—Ä–æ—Ç") ||
            content.contains("–∫—É–ª—å–º–∏–Ω–∞—Ü–∏—è") ||
            content.contains("—Ä–∞–∑–≤—è–∑–∫–∞") ||
            content.contains("–æ—Ç–∫—Ä—ã—Ç–∏–µ") ||
            content.contains("—Å–µ–∫—Ä–µ—Ç")) {
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        return content.length() > 50 && annotation.getTags() != null && annotation.getTags().size() > 2;
    }
    
    private KeyMoment createKeyMoment(Annotation annotation) {
        KeyMoment moment = new KeyMoment();
        moment.annotationId = annotation.getId();
        moment.pageNumber = annotation.getPageNumber();
        moment.title = annotation.getTitle();
        moment.description = annotation.getContent();
        moment.importance = calculateImportance(annotation);
        moment.category = annotation.getCategory();
        moment.tags = annotation.getTags();
        moment.timestamp = annotation.getCreatedAt();
        
        return moment;
    }
    
    private int calculateImportance(Annotation annotation) {
        int importance = 0;
        
        // –ë–∞–∑–æ–≤–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        importance += annotation.getPriority().getLevel() * 10;
        
        // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤
        if (annotation.getTags() != null) {
            importance += annotation.getTags().size() * 5;
        }
        
        // –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        importance += Math.min(annotation.getContent().length() / 10, 20);
        
        // –ë–æ–Ω—É—Å –∑–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        String content = annotation.getContent().toLowerCase();
        if (content.contains("–≤–∞–∂–Ω–æ")) importance += 15;
        if (content.contains("–∫–ª—é—á–µ–≤–æ–π")) importance += 15;
        if (content.contains("–≥–ª–∞–≤–Ω—ã–π")) importance += 10;
        if (content.contains("–æ—Å–Ω–æ–≤–Ω–æ–π")) importance += 10;
        
        return Math.min(importance, 100);
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–≥–∏ –∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
     */
    public void autoTagAnnotation(long annotationId, ServiceCallback<List<String>> callback) {
        executorService.execute(() -> {
            try {
                annotationService.getAnnotationById(annotationId).observeForever(annotation -> {
                    if (annotation != null) {
                        List<String> suggestedTags = generateTags(annotation.getContent());
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                        List<String> currentTags = annotation.getTags();
                        if (currentTags == null) {
                            currentTags = new ArrayList<>();
                        }
                        
                        for (String tag : suggestedTags) {
                            if (!currentTags.contains(tag)) {
                                currentTags.add(tag);
                            }
                        }
                        
                        annotation.setTags(currentTags);
                        
                        annotationService.updateAnnotationContent(annotationId, annotation.getContent(), 
                            new AnnotationService.ServiceCallback<Void>() {
                                @Override
                                public void onSuccess(Void result) {
                                    if (callback != null) callback.onSuccess(suggestedTags);
                                }
                                
                                @Override
                                public void onError(String message, Exception e) {
                                    if (callback != null) callback.onError(message, e);
                                }
                            });
                    }
                });
                
            } catch (Exception e) {
                if (callback != null) callback.onError("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", e);
            }
        });
    }
    
    private List<String> generateTags(String content) {
        List<String> tags = new ArrayList<>();
        String lowerContent = content.toLowerCase();
        
        // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for (Map.Entry<String, List<String>> entry : CATEGORY_KEYWORDS.entrySet()) {
            for (String keyword : entry.getValue()) {
                if (lowerContent.contains(keyword)) {
                    tags.add(entry.getKey().toLowerCase());
                    break;
                }
            }
        }
        
        // –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
        for (String emotion : EMOTION_INDICATORS.keySet()) {
            if (lowerContent.contains(emotion)) {
                tags.add("—ç–º–æ—Ü–∏—è:" + emotion);
            }
        }
        
        // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (QUESTION_PATTERN.matcher(content).matches()) {
            tags.add("–≤–æ–ø—Ä–æ—Å");
        }
        if (EXCLAMATION_PATTERN.matcher(content).matches()) {
            tags.add("–≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–µ");
        }
        if (TODO_PATTERN.matcher(lowerContent).matches()) {
            tags.add("–∑–∞–¥–∞—á–∞");
        }
        if (IDEA_PATTERN.matcher(lowerContent).matches()) {
            tags.add("–∏–¥–µ—è");
        }
        
        // –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã
        if (content.length() > 200) {
            tags.add("–ø–æ–¥—Ä–æ–±–Ω–æ");
        } else if (content.length() < 50) {
            tags.add("–∫—Ä–∞—Ç–∫–æ");
        }
        
        return tags;
    }
    
    // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
     */
    public void analyzeSentiment(long annotationId, ServiceCallback<SentimentResult> callback) {
        executorService.execute(() -> {
            try {
                annotationService.getAnnotationById(annotationId).observeForever(annotation -> {
                    if (annotation != null) {
                        SentimentResult sentiment = performSentimentAnalysis(annotation.getContent());
                        if (callback != null) callback.onSuccess(sentiment);
                    }
                });
                
            } catch (Exception e) {
                if (callback != null) callback.onError("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", e);
            }
        });
    }
    
    private SentimentResult performSentimentAnalysis(String text) {
        SentimentResult result = new SentimentResult();
        String lowerText = text.toLowerCase();
        
        // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        int positiveScore = 0;
        int negativeScore = 0;
        
        // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞
        String[] positiveWords = {"—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ", "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ", 
                                 "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–ª—é–±–ª—é", "—Ä–∞–¥–æ—Å—Ç—å", "—Å—á–∞—Å—Ç—å–µ", "–≤–æ—Å—Ç–æ—Ä–≥", "—É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ"};
        for (String word : positiveWords) {
            if (lowerText.contains(word)) positiveScore++;
        }
        
        // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞
        String[] negativeWords = {"–ø–ª–æ—Ö–æ", "—É–∂–∞—Å–Ω–æ", "–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ", "–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", "–Ω–µ–Ω–∞–≤–∏–∂—É", 
                                 "–≥—Ä—É—Å—Ç—å", "–ø–µ—á–∞–ª—å", "–∑–ª–æ—Å—Ç—å", "—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ"};
        for (String word : negativeWords) {
            if (lowerText.contains(word)) negativeScore++;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        if (positiveScore > negativeScore) {
            result.sentiment = "positive";
            result.confidence = Math.min(0.6 + (positiveScore - negativeScore) * 0.1, 1.0);
        } else if (negativeScore > positiveScore) {
            result.sentiment = "negative";
            result.confidence = Math.min(0.6 + (negativeScore - positiveScore) * 0.1, 1.0);
        } else {
            result.sentiment = "neutral";
            result.confidence = 0.5;
        }
        
        result.positiveScore = positiveScore;
        result.negativeScore = negativeScore;
        
        return result;
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–º–µ—Ç–æ–∫
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
     */
    public void findSimilarAnnotations(long annotationId, ServiceCallback<List<Annotation>> callback) {
        executorService.execute(() -> {
            try {
                annotationService.getAnnotationById(annotationId).observeForever(targetAnnotation -> {
                    if (targetAnnotation != null) {
                        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–æ–≥–æ –∂–µ –∫–æ–º–∏–∫—Å–∞
                        annotationService.getAnnotationsByComic(targetAnnotation.getComicId()).observeForever(allAnnotations -> {
                            List<SimilarityScore> similarities = new ArrayList<>();
                            
                            for (Annotation annotation : allAnnotations) {
                                if (annotation.getId() != annotationId) {
                                    double similarity = calculateSimilarity(targetAnnotation, annotation);
                                    if (similarity > 0.3) { // –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
                                        similarities.add(new SimilarityScore(annotation, similarity));
                                    }
                                }
                            }
                            
                            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏
                            similarities.sort((a, b) -> Double.compare(b.score, a.score));
                            
                            List<Annotation> similarAnnotations = new ArrayList<>();
                            for (int i = 0; i < Math.min(10, similarities.size()); i++) {
                                similarAnnotations.add(similarities.get(i).annotation);
                            }
                            
                            if (callback != null) callback.onSuccess(similarAnnotations);
                        });
                    }
                });
                
            } catch (Exception e) {
                if (callback != null) callback.onError("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π", e);
            }
        });
    }
    
    private double calculateSimilarity(Annotation annotation1, Annotation annotation2) {
        double similarity = 0.0;
        
        // –°—Ö–æ–∂–µ—Å—Ç—å –ø–æ —Ç–∏–ø—É
        if (annotation1.getType() == annotation2.getType()) {
            similarity += 0.2;
        }
        
        // –°—Ö–æ–∂–µ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (annotation1.getCategory() != null && annotation1.getCategory().equals(annotation2.getCategory())) {
            similarity += 0.2;
        }
        
        // –°—Ö–æ–∂–µ—Å—Ç—å –ø–æ —Ç–µ–≥–∞–º
        if (annotation1.getTags() != null && annotation2.getTags() != null) {
            Set<String> tags1 = new HashSet<>(annotation1.getTags());
            Set<String> tags2 = new HashSet<>(annotation2.getTags());
            Set<String> intersection = new HashSet<>(tags1);
            intersection.retainAll(tags2);
            
            if (!tags1.isEmpty() && !tags2.isEmpty()) {
                double tagSimilarity = (double) intersection.size() / Math.max(tags1.size(), tags2.size());
                similarity += tagSimilarity * 0.3;
            }
        }
        
        // –°—Ö–æ–∂–µ—Å—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑)
        String content1 = annotation1.getContent().toLowerCase();
        String content2 = annotation2.getContent().toLowerCase();
        
        String[] words1 = content1.split("\\s+");
        String[] words2 = content2.split("\\s+");
        
        Set<String> wordSet1 = new HashSet<>(Arrays.asList(words1));
        Set<String> wordSet2 = new HashSet<>(Arrays.asList(words2));
        Set<String> wordIntersection = new HashSet<>(wordSet1);
        wordIntersection.retainAll(wordSet2);
        
        if (!wordSet1.isEmpty() && !wordSet2.isEmpty()) {
            double contentSimilarity = (double) wordIntersection.size() / Math.max(wordSet1.size(), wordSet2.size());
            similarity += contentSimilarity * 0.3;
        }
        
        return similarity;
    }
    
    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    private AnalysisResult analyzeText(String text) {
        AnalysisResult result = new AnalysisResult();
        String lowerText = text.toLowerCase();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        result.category = "–û–±—â–µ–µ";
        for (Map.Entry<String, List<String>> entry : CATEGORY_KEYWORDS.entrySet()) {
            for (String keyword : entry.getValue()) {
                if (lowerText.contains(keyword)) {
                    result.category = entry.getKey();
                    break;
                }
            }
            if (!result.category.equals("–û–±—â–µ–µ")) break;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if (IMPORTANT_PATTERN.matcher(lowerText).matches()) {
            result.priority = AnnotationPriority.HIGH;
            result.color = "#FF0000";
            result.backgroundColor = "#FFE6E6";
        } else if (QUESTION_PATTERN.matcher(text).matches()) {
            result.priority = AnnotationPriority.NORMAL;
            result.color = "#0066CC";
            result.backgroundColor = "#E6F3FF";
        } else {
            result.priority = AnnotationPriority.NORMAL;
            result.color = "#000000";
            result.backgroundColor = "#FFFFFF";
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏
        result.tags = generateTags(text);
        
        return result;
    }
    
    private String truncateText(String text, int maxLength) {
        if (text.length() <= maxLength) {
            return text;
        }
        return text.substring(0, maxLength - 3) + "...";
    }
    
    public LiveData<String> getAnalysisStatusLiveData() {
        return analysisStatusLiveData;
    }
    
    // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ –∫–ª–∞—Å—Å—ã –¥–∞–Ω–Ω—ã—Ö
    
    public interface ServiceCallback<T> {
        void onSuccess(T result);
        void onError(String message, Exception e);
    }
    
    public static class OCRResult {
        public String text;
        public double confidence;
        public android.graphics.Rect boundingBox;
        
        public OCRResult(String text, double confidence, android.graphics.Rect boundingBox) {
            this.text = text;
            this.confidence = confidence;
            this.boundingBox = boundingBox;
        }
    }
    
    public static class KeyMoment {
        public long annotationId;
        public int pageNumber;
        public String title;
        public String description;
        public int importance;
        public String category;
        public List<String> tags;
        public Date timestamp;
    }
    
    public static class SentimentResult {
        public String sentiment; // positive, negative, neutral
        public double confidence;
        public int positiveScore;
        public int negativeScore;
    }
    
    private static class AnalysisResult {
        public String category;
        public AnnotationPriority priority;
        public List<String> tags;
        public String color;
        public String backgroundColor;
    }
    
    private static class SimilarityScore {
        public Annotation annotation;
        public double score;
        
        public SimilarityScore(Annotation annotation, double score) {
            this.annotation = annotation;
            this.score = score;
        }
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    public void cleanup() {
        if (executorService != null && !executorService.isShutdown()) {
            executorService.shutdown();
        }
    }
}

