package com.example.mrcomic.ui

import android.graphics.Bitmap
import android.widget.ImageView
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.slideInVertically
import androidx.compose.animation.slideOutVertically
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.gestures.rememberTransformableState
import androidx.compose.foundation.gestures.transformable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import com.example.mrcomic.R
import com.example.mrcomic.data.CbzPageProvider
import com.example.mrcomic.data.CbzUtils
import kotlinx.coroutines.delay
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.border
import dagger.hilt.android.lifecycle.HiltViewModel
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.compose.runtime.DisposableEffect
import com.example.mrcomic.data.PdfPageProvider
import com.example.mrcomic.data.CbrPageProvider
import android.util.LruCache
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import com.example.mrcomic.data.createPageProvider
import java.io.File

object PageCache {
    private val cache = LruCache<Int, Bitmap>(50)
    fun get(index: Int): Bitmap? = cache.get(index)
    fun put(index: Int, bmp: Bitmap) { if (get(index) == null) cache.put(index, bmp) }
    fun has(index: Int) = cache.get(index) != null
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ReaderScreen(
    comicId: Long,
    onNavigateBack: () -> Unit,
    viewModel: ReaderViewModel = hiltViewModel()
) {
    var showControls by remember { mutableStateOf(true) }
    var readingMode by remember { mutableStateOf("page") } // page, continuous, webtoon
    var scale by remember { mutableStateOf(1f) }
    var rotation by remember { mutableStateOf(0f) }
    var offset by remember { mutableStateOf(androidx.compose.ui.geometry.Offset.Zero) }

    val comic by viewModel.comic.collectAsState()
    val filePath = comic?.filePath ?: ""
    val comicTitle = comic?.title ?: "–ó–∞–≥—Ä—É–∑–∫–∞..."
    val context = LocalContext.current

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    val provider = remember(filePath) {
        if (filePath.isNotBlank()) createPageProvider(context, File(filePath)) else null
    }
    val totalPages = provider?.pageCount ?: comic?.pageCount ?: 100
    val bookmarks by viewModel.bookmarks.collectAsState()
    val currentPage by viewModel.currentPage.collectAsState()
    val isBookmarked = bookmarks.any { it.page == currentPage }
    var showBookmarksDialog by remember { mutableStateOf(false) }
    var showSearchDialog by remember { mutableStateOf(false) }
    var searchText by remember { mutableStateOf("") }
    val searchResults by viewModel.searchResults.collectAsState()
    var currentSearchResultIndex by remember { mutableStateOf(0) }

    val lazyListState = rememberLazyListState()

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ 'page'
    var imageBitmap by remember { mutableStateOf<Bitmap?>(null) }
    LaunchedEffect(currentPage, provider, readingMode) {
        if (readingMode == "page" && provider != null) {
            withContext(Dispatchers.IO) {
                if (!PageCache.has(currentPage)) {
                    provider.getPage(currentPage)?.let { PageCache.put(currentPage, it) }
                }
                imageBitmap = PageCache.get(currentPage)
            }
        }
    }

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ä–µ–∂–∏–º–∞ 'page'
    LaunchedEffect(currentPage, provider, readingMode) {
        if (readingMode == "page" && provider != null) {
            withContext(Dispatchers.IO) {
                listOf(currentPage - 1, currentPage + 1)
                    .filter { it in 0 until totalPages && !PageCache.has(it) }
                    .forEach { preloadPage ->
                        provider.getPage(preloadPage)?.let { PageCache.put(preloadPage, it) }
                    }
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ currentPage –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ LazyColumn
    LaunchedEffect(lazyListState, readingMode) {
        snapshotFlow { lazyListState.firstVisibleItemIndex }
            .collect { index ->
                if (readingMode != "page") {
                    viewModel.setPage(index)
                }
            }
    }

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ LazyColumn –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ currentPage
    LaunchedEffect(currentPage, readingMode) {
        if (readingMode != "page") {
            lazyListState.scrollToItem(currentPage)
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ ReaderScreen
    DisposableEffect(Unit) {
        onDispose {
            viewModel.saveCurrentPage(currentPage)
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ViewModel –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    LaunchedEffect(comicId, totalPages) {
        // TODO: –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –±–∞–∑—ã, —Å–µ–π—á–∞—Å –≤—Å–µ–≥–¥–∞ 0
        viewModel.init(comicId, 0, totalPages)
    }

    // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    LaunchedEffect(showControls) {
        if (showControls) {
            delay(3000)
            showControls = false
        }
    }

    val state = rememberTransformableState { zoomChange, panChange, rotationChange ->
        scale *= zoomChange
        rotation += rotationChange
        offset += panChange
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black)
            .pointerInput(Unit) {
                detectTapGestures(
                    onTap = { showControls = !showControls }
                )
            }
    ) {
        // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        AnimatedVisibility(
            visible = showControls,
            enter = slideInVertically { -it },
            exit = slideOutVertically { -it }
        ) {
            TopAppBar(
                title = {
                    Text(
                        text = comicTitle,
                        color = Color.White,
                        style = MaterialTheme.typography.titleMedium
                    )
                },
                navigationIcon = {
                    IconButton(onClick = onNavigateBack) {
                        Text(
                            text = "‚Üê",
                            color = Color.White,
                            style = MaterialTheme.typography.titleLarge
                        )
                    }
                },
                actions = {
                    IconButton(onClick = { showSearchDialog = true }) { // –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
                        Text(
                            text = "üîç",
                            color = Color.White,
                            style = MaterialTheme.typography.titleMedium
                        )
                    }
                    IconButton(onClick = { /* TODO: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */ }) {
                        Text(
                            text = "‚öôÔ∏è",
                            color = Color.White,
                            style = MaterialTheme.typography.titleMedium
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color.Black.copy(alpha = 0.8f)
                )
            )
        }

        // –û–±–ª–∞—Å—Ç—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–∏–∫—Å–∞
        when (readingMode) {
            "page" -> {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .weight(1f)
                        .padding(8.dp)
                        .background(Color.DarkGray)
                        .transformable(state = state)
                        .graphicsLayer(
                            scaleX = scale,
                            scaleY = scale,
                            rotationZ = rotation,
                            translationX = offset.x,
                            translationY = offset.y
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    if (imageBitmap != null) {
                        AndroidView(
                            factory = { ctx ->
                                ImageView(ctx).apply {
                                    scaleType = ImageView.ScaleType.FIT_CENTER
                                    setImageBitmap(imageBitmap)
                                }
                            },
                            modifier = Modifier.fillMaxSize()
                        )
                    } else {
                        CircularProgressIndicator()
                    }
                }
            }
            "continuous" -> {
                LazyColumn(
                    state = lazyListState,
                    modifier = Modifier
                        .fillMaxWidth()
                        .weight(1f)
                        .padding(horizontal = 8.dp) // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–∞–¥–¥–∏–Ω–≥
                        .background(Color.DarkGray)
                        .transformable(state = state)
                        .graphicsLayer(
                            scaleX = scale,
                            scaleY = scale,
                            rotationZ = rotation,
                            translationX = offset.x,
                            translationY = offset.y
                        ),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    itemsIndexed(List(totalPages) { it }) { index, _ ->
                        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è LazyColumn
                        var pageBitmap by remember { mutableStateOf<Bitmap?>(null) }
                        LaunchedEffect(index, provider) {
                            withContext(Dispatchers.IO) {
                                if (provider != null && !PageCache.has(index)) {
                                    provider.getPage(index)?.let { PageCache.put(index, it) }
                                }
                                pageBitmap = PageCache.get(index)
                            }
                        }

                        if (pageBitmap != null) {
                            AndroidView(
                                factory = { ctx ->
                                    ImageView(ctx).apply {
                                        scaleType = ImageView.ScaleType.FIT_WIDTH
                                        setImageBitmap(pageBitmap)
                                    }
                                },
                                modifier = Modifier.fillMaxWidth()
                            )
                        } else {
                            CircularProgressIndicator(modifier = Modifier.padding(16.dp))
                        }
                    }
                }
            }
            "webtoon" -> {
                LazyColumn(
                    state = lazyListState,
                    modifier = Modifier
                        .fillMaxWidth()
                        .weight(1f)
                        .padding(horizontal = 8.dp) // –£–±–∏—Ä–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ø–∞–¥–¥–∏–Ω–≥ –¥–ª—è –≤–µ–±—Ç—É–Ω–∞
                        .background(Color.Black) // –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –≤–µ–±—Ç—É–Ω–∞
                        .transformable(state = state)
                        .graphicsLayer(
                            scaleX = scale,
                            scaleY = scale,
                            rotationZ = rotation,
                            translationX = offset.x,
                            translationY = offset.y
                        ),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    itemsIndexed(List(totalPages) { it }) { index, _ ->
                        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è LazyColumn
                        var pageBitmap by remember { mutableStateOf<Bitmap?>(null) }
                        LaunchedEffect(index, provider) {
                            withContext(Dispatchers.IO) { // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: withWithContext –Ω–∞ withContext
                                if (provider != null && !PageCache.has(index)) {
                                    provider.getPage(index)?.let { PageCache.put(index, it) }
                                }
                                pageBitmap = PageCache.get(index)
                            }
                        }

                        if (pageBitmap != null) {
                            AndroidView(
                                factory = { ctx ->
                                    ImageView(ctx).apply {
                                        scaleType = ImageView.ScaleType.FIT_WIDTH // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ FIT_WIDTH –¥–ª—è –≤–µ–±—Ç—É–Ω–∞
                                        setImageBitmap(pageBitmap)
                                    }
                                },
                                modifier = Modifier.fillMaxWidth()
                            )
                        } else {
                            CircularProgressIndicator(modifier = Modifier.padding(16.dp))
                        }
                    }
                }
            }
        }

        // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        AnimatedVisibility(
            visible = showControls,
            enter = slideInVertically { it },
            exit = slideOutVertically { it }
        ) {
            BottomAppBar(
                containerColor = Color.Black.copy(alpha = 0.8f)
            ) {
                // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                if (totalPages > 0) {
                    Column(
                        modifier = Modifier
                            .weight(1f)
                            .padding(horizontal = 16.dp)
                    ) {
                        LinearProgressIndicator(
                            progress = { (currentPage + 1).toFloat() / totalPages.toFloat() },
                            modifier = Modifier.fillMaxWidth()
                        )
                        Spacer(modifier = Modifier.height(4.dp))
                        Text(
                            text = "–°—Ç—Ä. ${currentPage + 1} / $totalPages",
                            color = Color.White,
                            style = MaterialTheme.typography.bodySmall,
                            textAlign = TextAlign.Center,
                            modifier = Modifier.fillMaxWidth()
                        )
                    }
                }

                // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
                    Button(
                        onClick = { viewModel.setPage(currentPage - 1) },
                        enabled = currentPage > 0
                    ) {
                        Text("‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è")
                    }

                    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = "${currentPage + 1} / $totalPages",
                            color = Color.White,
                            style = MaterialTheme.typography.bodyMedium
                        )
                        Text(
                            text = "${((currentPage + 1) * 100 / totalPages)}%",
                            color = Color.Gray,
                            style = MaterialTheme.typography.bodySmall
                        )
                    }

                    // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
                    Button(
                        onClick = { viewModel.setPage(currentPage + 1) },
                        enabled = currentPage < totalPages - 1
                    ) {
                        Text("–°–ª–µ–¥—É—é—â–∞—è ‚Üí")
                    }
                }

                Spacer(modifier = Modifier.height(8.dp))

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceEvenly
                ) {
                    // –†–µ–∂–∏–º —á—Ç–µ–Ω–∏—è
                    var readingModeExpanded by remember { mutableStateOf(false) }
                    ExposedDropdownMenuBox(
                        expanded = readingModeExpanded,
                        onExpandedChange = { readingModeExpanded = it }
                    ) {
                        OutlinedButton(
                            onClick = { readingModeExpanded = true }
                        ) {
                            Text(
                                when (readingMode) {
                                    "page" -> "üì±"
                                    "continuous" -> "üìÑ"
                                    "webtoon" -> "üìú"
                                    else -> "üì±"
                                }
                            )
                        }

                        ExposedDropdownMenu(
                            expanded = readingModeExpanded,
                            onDismissRequest = { readingModeExpanded = false }
                        ) {
                            DropdownMenuItem(
                                text = { Text("üì± –ü–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º") },
                                onClick = {
                                    readingMode = "page"
                                    readingModeExpanded = false
                                }
                            )
                            DropdownMenuItem(
                                text = { Text("üìÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ") },
                                onClick = {
                                    readingMode = "continuous"
                                    readingModeExpanded = false
                                }
                            )
                            DropdownMenuItem(
                                text = { Text("üìú –í–µ–±—Ç—É–Ω") },
                                onClick = {
                                    readingMode = "webtoon"
                                    readingModeExpanded = false
                                }
                            )
                        }
                    }

                    // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                    IconButton(
                        onClick = { scale = if (scale < 2.0f) scale + 0.1f else 1.0f }
                    ) {
                        Text("üîç", style = MaterialTheme.typography.titleMedium)
                    }

                    // –ü–æ–≤–æ—Ä–æ—Ç
                    IconButton(
                        onClick = { rotation = (rotation + 90f) % 360f }
                    ) {
                        Text("üîÑ", style = MaterialTheme.typography.titleMedium)
                    }

                    // –ó–∞–∫–ª–∞–¥–∫–∞
                    IconButton(
                        onClick = {
                            if (isBookmarked) {
                                val bm = bookmarks.find { it.page == currentPage }
                                if (bm != null) viewModel.removeBookmark(bm)
                            } else {
                                viewModel.addBookmark()
                            }
                        }
                    ) {
                        Text(
                            if (isBookmarked) "üîñ" else "üìñ",
                            style = MaterialTheme.typography.titleMedium
                        )
                    }

                    // –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∑–∞–∫–ª–∞–¥–∫–∞–º
                    IconButton(
                        onClick = { showBookmarksDialog = true }
                    ) {
                        Text("‚≠ê", style = MaterialTheme.typography.titleMedium)
                    }
                }

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceEvenly
                ) {
                    OutlinedButton(
                        onClick = { viewModel.setPage(0) }
                    ) {
                        Text("‚èÆÔ∏è –í –Ω–∞—á–∞–ª–æ")
                    }

                    OutlinedButton(
                        onClick = { viewModel.setPage(totalPages / 2) }
                    ) {
                        Text("‚è∏Ô∏è –°–µ—Ä–µ–¥–∏–Ω–∞")
                    }

                    OutlinedButton(
                        onClick = { viewModel.setPage(totalPages - 1) }
                    ) {
                        Text("‚è≠Ô∏è –í –∫–æ–Ω–µ—Ü")
                    }
                }
            }
        }
    }

    if (showBookmarksDialog) {
        AlertDialog(
            onDismissRequest = { showBookmarksDialog = false },
            title = { Text("–ó–∞–∫–ª–∞–¥–∫–∏") },
            text = {
                if (bookmarks.isEmpty()) {
                    Text("–ù–µ—Ç –∑–∞–∫–ª–∞–¥–æ–∫")
                } else {
                    Column {
                        bookmarks.forEach { bm ->
                            Row(
                                modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp),
                                horizontalArrangement = Arrangement.SpaceBetween,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${bm.page + 1}", modifier = Modifier.weight(1f))
                                IconButton(onClick = {
                                    viewModel.setPage(bm.page)
                                    showBookmarksDialog = false
                                }) {
                                    Text("–ü–µ—Ä–µ–π—Ç–∏")
                                }
                                IconButton(onClick = { viewModel.removeBookmark(bm) }) {
                                    Text("‚ùå")
                                }
                            }
                        }
                    }
                }
            },
            confirmButton = {
                TextButton(onClick = { showBookmarksDialog = false }) {
                    Text("–ó–∞–∫—Ä—ã—Ç—å")
                }
            }
        )
    }

    if (showSearchDialog) {
        val searchResultsState by viewModel.searchResults.collectAsState()
        AlertDialog(
            onDismissRequest = { showSearchDialog = false },
            title = { Text("–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞") },
            text = {
                Column {
                    OutlinedTextField(
                        value = searchText,
                        onValueChange = { searchText = it },
                        label = { Text("–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞") },
                        modifier = Modifier.fillMaxWidth()
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text("–ù–∞–π–¥–µ–Ω–æ: ${searchResultsState.size}", style = MaterialTheme.typography.bodySmall)
                }
            },
            confirmButton = {
                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
                    TextButton(onClick = {
                        if (searchResultsState.isNotEmpty()) {
                            currentSearchResultIndex = (currentSearchResultIndex - 1 + searchResultsState.size) % searchResultsState.size
                            viewModel.setPage(searchResultsState[currentSearchResultIndex])
                        }
                    }) {
                        Text("‚Üê")
                    }
                    TextButton(onClick = {
                        viewModel.search(searchText)
                        currentSearchResultIndex = 0 // –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ
                        if (searchResultsState.isNotEmpty()) {
                            viewModel.setPage(searchResultsState[currentSearchResultIndex])
                        }
                    }) {
                        Text("–ü–æ–∏—Å–∫")
                    }
                    TextButton(onClick = {
                        if (searchResultsState.isNotEmpty()) {
                            currentSearchResultIndex = (currentSearchResultIndex + 1) % searchResultsState.size
                            viewModel.setPage(searchResultsState[currentSearchResultIndex])
                        }
                    }) {
                        Text("‚Üí")
                    }
                }
            }
        )
    }
}


