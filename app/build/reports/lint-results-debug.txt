C:\Users\xmeta\projects\Mr.Comic\app\lint-baseline.xml: Hint: 26 errors, 135 warnings and 1 hint were filtered out because they are listed in the baseline file, lint-baseline.xml [LintBaseline]
C:\Users\xmeta\projects\Mr.Comic\app\lint-baseline.xml: Hint: 3 errors/warnings were listed in the baseline file (lint-baseline.xml) but not found in the project; perhaps they have been fixed? Another possible explanation is that lint recently stopped analyzing (and including results from) dependent projects by default. You can turn this back on with android.lintOptions.checkDependencies=true. Unmatched issue types: GradleDependency (2), NewerVersionAvailable [LintBaselineFixed]

   Explanation for issues of type "LintBaselineFixed":
   If a lint baseline describes a problem which is no longer reported, then
   the problem has either been fixed, or perhaps the issue type has been
   disabled. In any case, the entry can be removed from the baseline (such
   that if the issue is reintroduced at some point, lint will complain rather
   than just silently starting to match the old baseline entry again.)

C:\Users\xmeta\projects\Mr.Comic\app\build.gradle.kts:67: Warning: A newer version of androidx.compose:compose-bom than 2024.05.00 is available: 2025.06.01 [GradleDependency]
    implementation(platform("androidx.compose:compose-bom:2024.05.00"))
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\xmeta\projects\Mr.Comic\app\build.gradle.kts:71: Warning: A newer version of androidx.compose.material3:material3 than 1.2.1 is available: 1.3.2 [GradleDependency]
    implementation("androidx.compose.material3:material3:1.2.1")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\xmeta\projects\Mr.Comic\app\build.gradle.kts:105: Warning: A newer version of androidx.compose:compose-bom than 2024.05.00 is available: 2025.06.01 [GradleDependency]
    androidTestImplementation(platform("androidx.compose:compose-bom:2024.05.00"))
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

C:\Users\xmeta\projects\Mr.Comic\app\src\main\java\com\example\mrcomic\ui\AddComicViewModel.kt:39: Warning: Use the KTX extension function String.toUri instead? [UseKtx]
                val uri = Uri.parse(uriString)
                          ~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UseKtx":
   The Android KTX libraries decorates the Android platform SDK as well as
   various libraries with more convenient extension functions available from
   Kotlin, allowing you to use default parameters, named parameters, and
   more.

   Available options:

   **remove-defaults** (default is true):
   Whether to skip arguments that match the defaults provided by the extension.

   Extensions often provide default values for some of the parameters. For example:
   ```kotlin
   fun Path.readLines(charset: Charset = Charsets.UTF_8): List<String> { return Files.readAllLines(this, charset) }
   ```
   This lint check will by default automatically omit parameters that match the default, so if your code was calling

   ```kotlin
   Files.readAllLines(file, Charset.UTF_8)
   ```
   lint would replace this with
   ```kotlin
   file.readLines()
   ```
   rather than

   ```kotlin
   file.readLines(Charset.UTF_8
   ```
   You can turn this behavior off using this option.

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UseKtx">
           <option name="remove-defaults" value="true" />
       </issue>
   </lint>
   ```

   **require-present** (default is true):
   Whether to only offer extensions already available.

   This option lets you only have lint suggest extension replacements if those extensions are already available on the class path (in other words, you're already depending on the library containing the extension method.)

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UseKtx">
           <option name="require-present" value="true" />
       </issue>
   </lint>
   ```

0 errors, 4 warnings (and 26 errors, 135 warnings, 1 hint filtered by baseline lint-baseline.xml)
