package com.example.core.analytics

import android.util.Log
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton

/**
 * –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ Logcat –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 */
@Singleton
class LocalAnalyticsTracker @Inject constructor(
    private val analyticsStorage: RoomAnalyticsStorage
) : AnalyticsTracker {
    
    private var isTrackingEnabled = true
    private var currentUserId: String? = null
    private val userProperties = mutableMapOf<String, Any>()
    
    companion object {
        private const val TAG = "Analytics"
    }

    override suspend fun trackEvent(event: AnalyticsEvent) = withContext(Dispatchers.IO) {
        if (!isTrackingEnabled) return@withContext
        
        // Store event in database
        analyticsStorage.saveEvent(event)
        
        val logMessage = buildString {
            append("üìä EVENT: ${event.eventName}")
            if (event.parameters.isNotEmpty()) {
                append("\n   Parameters: ${event.parameters}")
            }
            currentUserId?.let { append("\n   User ID: $it") }
            if (userProperties.isNotEmpty()) {
                append("\n   User Properties: $userProperties")
            }
        }
        
        Log.d(TAG, logMessage)
        
        // –í production –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ Firebase Analytics, Mixpanel –∏ —Ç.–¥.
    }

    override suspend fun setUserProperties(properties: Map<String, Any>) = withContext(Dispatchers.IO) {
        if (!isTrackingEnabled) return@withContext
        
        userProperties.putAll(properties)
        Log.d(TAG, "üë§ USER PROPERTIES UPDATED: $userProperties")
    }

    override suspend fun setUserId(userId: String) = withContext(Dispatchers.IO) {
        if (!isTrackingEnabled) return@withContext
        
        currentUserId = userId
        Log.d(TAG, "üÜî USER ID SET: $userId")
    }

    override suspend fun setTrackingEnabled(enabled: Boolean) {
        withContext(Dispatchers.IO) {
            isTrackingEnabled = enabled
            Log.d(TAG, "üîÑ TRACKING ${if (enabled) "ENABLED" else "DISABLED"}")
        }
    }

    override suspend fun clearUserData() {
        withContext(Dispatchers.IO) {
            currentUserId = null
            userProperties.clear()
            Log.d(TAG, "üóëÔ∏è USER DATA CLEARED")
        }
    }
}