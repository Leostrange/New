package com.example.feature.settings.ui

import android.net.Uri
import androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Backup\nimport androidx.compose.material.icons.filled.Restore\nimport androidx.compose.material.icons.filled.Info\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport kotlinx.coroutines.launch\nimport java.text.SimpleDateFormat\nimport java.util.*

@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun BackupRestoreScreen(\n    onNavigateBack: () -> Unit,\n    viewModel: BackupRestoreViewModel = hiltViewModel()\n) {\n    val uiState by viewModel.uiState.collectAsState()\n    val context = LocalContext.current\n    val coroutineScope = rememberCoroutineScope()\n    \n    var showRestoreDialog by remember { mutableStateOf(false) }\n    var selectedBackupInfo by remember { mutableStateOf<BackupInfo?>(null) }\n    \n    // Backup file creation launcher\n    val backupLauncher = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.CreateDocument(\"application/zip\")\n    ) { uri: Uri? ->\n        uri?.let {\n            coroutineScope.launch {\n                viewModel.createBackup(it)\n            }\n        }\n    }\n    \n    // Restore file selection launcher\n    val restoreLauncher = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.OpenDocument()\n    ) { uri: Uri? ->\n        uri?.let {\n            coroutineScope.launch {\n                val info = viewModel.getBackupInfo(it)\n                if (info != null) {\n                    selectedBackupInfo = info\n                    showRestoreDialog = true\n                } else {\n                    viewModel.showError(\"Invalid backup file\")\n                }\n            }\n        }\n    }\n    \n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text(\"Backup & Restore\") },\n                navigationIcon = {\n                    IconButton(onClick = onNavigateBack) {\n                        Icon(Icons.Default.ArrowBack, contentDescription = \"Back\")\n                    }\n                }\n            )\n        }\n    ) { paddingValues ->\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(paddingValues)\n                .padding(16.dp)\n                .verticalScroll(rememberScrollState()),\n            verticalArrangement = Arrangement.spacedBy(16.dp)\n        ) {\n            // Backup Section\n            Card(\n                modifier = Modifier.fillMaxWidth(),\n                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)\n            ) {\n                Column(\n                    modifier = Modifier.padding(16.dp)\n                ) {\n                    Row(\n                        verticalAlignment = Alignment.CenterVertically\n                    ) {\n                        Icon(\n                            Icons.Default.Backup,\n                            contentDescription = null,\n                            tint = MaterialTheme.colorScheme.primary\n                        )\n                        Spacer(modifier = Modifier.width(8.dp))\n                        Text(\n                            text = \"Create Backup\",\n                            style = MaterialTheme.typography.titleMedium,\n                            fontWeight = FontWeight.Bold\n                        )\n                    }\n                    \n                    Spacer(modifier = Modifier.height(8.dp))\n                    \n                    Text(\n                        text = \"Export your comics, bookmarks, settings, and plugins to a backup file.\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        color = MaterialTheme.colorScheme.onSurfaceVariant\n                    )\n                    \n                    Spacer(modifier = Modifier.height(16.dp))\n                    \n                    Button(\n                        onClick = {\n                            val fileName = \"mrcomic_backup_${SimpleDateFormat(\"yyyy-MM-dd_HH-mm-ss\", Locale.getDefault()).format(Date())}.zip\"\n                            backupLauncher.launch(fileName)\n                        },\n                        enabled = !uiState.isCreatingBackup,\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        if (uiState.isCreatingBackup) {\n                            CircularProgressIndicator(\n                                size = 16.dp,\n                                strokeWidth = 2.dp,\n                                color = MaterialTheme.colorScheme.onPrimary\n                            )\n                            Spacer(modifier = Modifier.width(8.dp))\n                        }\n                        Text(if (uiState.isCreatingBackup) \"Creating Backup...\" else \"Create Backup\")\n                    }\n                }\n            }\n            \n            // Restore Section\n            Card(\n                modifier = Modifier.fillMaxWidth(),\n                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)\n            ) {\n                Column(\n                    modifier = Modifier.padding(16.dp)\n                ) {\n                    Row(\n                        verticalAlignment = Alignment.CenterVertically\n                    ) {\n                        Icon(\n                            Icons.Default.Restore,\n                            contentDescription = null,\n                            tint = MaterialTheme.colorScheme.secondary\n                        )\n                        Spacer(modifier = Modifier.width(8.dp))\n                        Text(\n                            text = \"Restore from Backup\",\n                            style = MaterialTheme.typography.titleMedium,\n                            fontWeight = FontWeight.Bold\n                        )\n                    }\n                    \n                    Spacer(modifier = Modifier.height(8.dp))\n                    \n                    Text(\n                        text = \"Import comics, bookmarks, settings, and plugins from a backup file.\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        color = MaterialTheme.colorScheme.onSurfaceVariant\n                    )\n                    \n                    Spacer(modifier = Modifier.height(8.dp))\n                    \n                    Card(\n                        colors = CardDefaults.cardColors(\n                            containerColor = MaterialTheme.colorScheme.errorContainer\n                        )\n                    ) {\n                        Row(\n                            modifier = Modifier.padding(12.dp),\n                            verticalAlignment = Alignment.CenterVertically\n                        ) {\n                            Icon(\n                                Icons.Default.Warning,\n                                contentDescription = null,\n                                tint = MaterialTheme.colorScheme.onErrorContainer\n                            )\n                            Spacer(modifier = Modifier.width(8.dp))\n                            Text(\n                                text = \"Warning: This will replace all current data!\",\n                                style = MaterialTheme.typography.bodySmall,\n                                color = MaterialTheme.colorScheme.onErrorContainer\n                            )\n                        }\n                    }\n                    \n                    Spacer(modifier = Modifier.height(16.dp))\n                    \n                    OutlinedButton(\n                        onClick = {\n                            restoreLauncher.launch(arrayOf(\"application/zip\"))\n                        },\n                        enabled = !uiState.isRestoring,\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        if (uiState.isRestoring) {\n                            CircularProgressIndicator(\n                                size = 16.dp,\n                                strokeWidth = 2.dp\n                            )\n                            Spacer(modifier = Modifier.width(8.dp))\n                        }\n                        Text(if (uiState.isRestoring) \"Restoring...\" else \"Select Backup File\")\n                    }\n                }\n            }\n            \n            // Status messages\n            uiState.message?.let { message ->\n                Card(\n                    colors = CardDefaults.cardColors(\n                        containerColor = if (uiState.isError) {\n                            MaterialTheme.colorScheme.errorContainer\n                        } else {\n                            MaterialTheme.colorScheme.primaryContainer\n                        }\n                    )\n                ) {\n                    Text(\n                        text = message,\n                        modifier = Modifier.padding(16.dp),\n                        color = if (uiState.isError) {\n                            MaterialTheme.colorScheme.onErrorContainer\n                        } else {\n                            MaterialTheme.colorScheme.onPrimaryContainer\n                        }\n                    )\n                }\n            }\n        }\n    }\n    \n    // Restore confirmation dialog\n    if (showRestoreDialog) {\n        selectedBackupInfo?.let { backupInfo ->\n            AlertDialog(\n                onDismissRequest = { showRestoreDialog = false },\n                title = { Text(\"Restore Backup\") },\n                text = {\n                    Column {\n                        Text(\"Are you sure you want to restore this backup?\")\n                        Spacer(modifier = Modifier.height(8.dp))\n                        \n                        Text(\n                            text = \"Backup Information:\",\n                            fontWeight = FontWeight.Bold\n                        )\n                        Text(\"• Date: ${backupInfo.formattedDate}\")\n                        Text(\"• Comics: ${backupInfo.comicsCount}\")\n                        Text(\"• Bookmarks: ${backupInfo.bookmarksCount}\")\n                        Text(\"• Plugins: ${backupInfo.pluginsCount}\")\n                        \n                        Spacer(modifier = Modifier.height(8.dp))\n                        Text(\n                            text = \"This will replace all current data!\",\n                            color = MaterialTheme.colorScheme.error,\n                            fontWeight = FontWeight.Bold\n                        )\n                    }\n                },\n                confirmButton = {\n                    Button(\n                        onClick = {\n                            showRestoreDialog = false\n                            coroutineScope.launch {\n                                // The restore URI should be stored in viewModel\n                                viewModel.restoreBackup()\n                            }\n                        }\n                    ) {\n                        Text(\"Restore\")\n                    }\n                },\n                dismissButton = {\n                    TextButton(\n                        onClick = { showRestoreDialog = false }\n                    ) {\n                        Text(\"Cancel\")\n                    }\n                }\n            )\n        }\n    }\n}