name: 📱 Build APK

on:
  push:
    branches: [ feat/initial-project-setup, main, develop ]
    paths:
      - 'android/**'
      - 'gradle/**'
      - '*.gradle.kts'
  pull_request:
    branches: [ feat/initial-project-setup, main, develop ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'both'
        type: choice
        options:
        - debug
        - release
        - both

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx4g"

jobs:
  # ============================================================================
  # 🚀 FAST APK BUILD
  # ============================================================================
  build-apk:
    name: 🏗️ Build APK
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: ☕ Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Install the Android SDK and build tools
      - name: 📱 Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 35
          components: platform-tools, platforms;android-35, build-tools;35.0.0

      - name: 🗃️ Setup Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', 'gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🔐 Make Gradlew Executable
        run: chmod +x ./gradlew

      - name: ✅ Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: 🏗️ Build Debug APK
        if: ${{ github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '' }}
        run: |
          echo "🔨 Building Debug APK..."
          ./gradlew :android:app:assembleDebug --build-cache --no-daemon
          echo "✅ Debug APK built successfully"

      - name: 🏗️ Build Release APK
        if: ${{ github.event.inputs.build_type == 'release' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '' }}
        run: |
          echo "🔨 Building Release APK..."
          ./gradlew :android:app:assembleRelease --build-cache --no-daemon
          echo "✅ Release APK built successfully"

      - name: 📊 APK Information
        run: |
          echo "# 📱 APK Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Debug APK info
          DEBUG_APK_PATH="android/app/build/outputs/apk/debug"
          if [ -d "$DEBUG_APK_PATH" ] && [ "$(ls -A $DEBUG_APK_PATH/*.apk 2>/dev/null)" ]; then
            DEBUG_APK=$(find $DEBUG_APK_PATH -name "*.apk" | head -1)
            DEBUG_SIZE=$(ls -lh "$DEBUG_APK" | awk '{print $5}')
            DEBUG_NAME=$(basename "$DEBUG_APK")
            echo "🐛 **Debug APK**: $DEBUG_NAME ($DEBUG_SIZE)" >> $GITHUB_STEP_SUMMARY
            echo "📁 Path: $DEBUG_APK_PATH" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Release APK info
          RELEASE_APK_PATH="android/app/build/outputs/apk/release"
          if [ -d "$RELEASE_APK_PATH" ] && [ "$(ls -A $RELEASE_APK_PATH/*.apk 2>/dev/null)" ]; then
            RELEASE_APK=$(find $RELEASE_APK_PATH -name "*.apk" | head -1)
            RELEASE_SIZE=$(ls -lh "$RELEASE_APK" | awk '{print $5}')
            RELEASE_NAME=$(basename "$RELEASE_APK")
            echo "🚀 **Release APK**: $RELEASE_NAME ($RELEASE_SIZE)" >> $GITHUB_STEP_SUMMARY
            echo "📁 Path: $RELEASE_APK_PATH" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Download APKs from Artifacts section below!**" >> $GITHUB_STEP_SUMMARY

      - name: 📱 Upload Debug APK
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mr-comic-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk
          retention-days: 14
          if-no-files-found: warn

      - name: 📱 Upload Release APK
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mr-comic-release-apk
          path: android/app/build/outputs/apk/release/*.apk
          retention-days: 30
          if-no-files-found: warn

      - name: 🎉 Build Summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Build Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ] || [ -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
            echo "✅ **SUCCESS**: APK build completed!" >> $GITHUB_STEP_SUMMARY
            echo "📱 Download APK files from the Artifacts section" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **WARNING**: No APK files found" >> $GITHUB_STEP_SUMMARY
            echo "🔍 Check build logs for details" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Mr.Comic Android App Ready!**" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # 🧪 QUICK TESTS (Optional)
  # ============================================================================
  quick-tests:
    name: 🧪 Quick Tests
    runs-on: ubuntu-latest
    needs: build-apk
    if: github.event_name != 'workflow_dispatch'
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: ☕ Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Install the Android SDK for tests
      - name: 📱 Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 35
          components: platform-tools, platforms;android-35, build-tools;35.0.0

      - name: 🗃️ Restore Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', 'gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🔐 Make Gradlew Executable
        run: chmod +x ./gradlew

      - name: 🧪 Run Unit Tests
        run: |
          ./gradlew test --continue --build-cache
        continue-on-error: true

      - name: 📊 Test Summary
        if: always()
        run: |
          echo "# 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if find . -name "TEST-*.xml" -type f | head -1 > /dev/null 2>&1; then
            echo "✅ Unit tests executed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No test results found" >> $GITHUB_STEP_SUMMARY
          fi