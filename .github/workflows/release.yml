name: üöÄ Release & Deployment

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.jvmargs="-Xmx4g -XX:MaxMetaspaceSize=1g"

jobs:
  # ============================================================================
  # üîç VALIDATE RELEASE
  # ============================================================================
  validate-release:
    name: üîç Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.get-version.outputs.is-prerelease }}
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üè∑Ô∏è Get Version Info
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            if [[ "$VERSION" == *"alpha"* || "$VERSION" == *"beta"* || "$VERSION" == *"rc"* ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "üì¶ Release Version: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "üè∑Ô∏è Pre-release: $IS_PRERELEASE" >> $GITHUB_STEP_SUMMARY

      - name: ‚òï Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üîê Grant Execute Permission
        run: chmod +x ./gradlew

      - name: ‚úÖ Validate Project
        run: |
          ./gradlew projects --quiet
          echo "‚úÖ Project validation successful" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # üß™ FULL TEST SUITE
  # ============================================================================
  full-test-suite:
    name: üß™ Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚òï Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üóÉÔ∏è Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: üîê Grant Execute Permission
        run: chmod +x ./gradlew

      - name: üß™ Run All Tests
        run: |
          ./gradlew test --continue --build-cache --parallel
          echo "‚úÖ All unit tests passed" >> $GITHUB_STEP_SUMMARY

      - name: üîç Run Lint
        run: |
          ./gradlew lint --continue --build-cache
          echo "‚úÖ Lint checks completed" >> $GITHUB_STEP_SUMMARY

      - name: üìä Generate Test Reports
        run: |
          ./gradlew jacocoTestReport --continue
          echo "‚úÖ Test coverage reports generated" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # üèóÔ∏è BUILD RELEASE ARTIFACTS
  # ============================================================================
  build-release:
    name: üèóÔ∏è Build Release
    runs-on: ubuntu-latest
    needs: [validate-release, full-test-suite]
    strategy:
      matrix:
        build-type: [debug, release]
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚òï Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üóÉÔ∏è Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: üîê Grant Execute Permission
        run: chmod +x ./gradlew

      - name: üèóÔ∏è Build ${{ matrix.build-type }} APK
        run: |
          if [ "${{ matrix.build-type }}" = "debug" ]; then
            ./gradlew assembleDebug --build-cache --parallel
          else
            ./gradlew assembleRelease --build-cache --parallel
          fi

      - name: üìù Generate APK Info
        id: apk-info
        run: |
          APK_PATH="android/app/build/outputs/apk/${{ matrix.build-type }}"
          if [ -d "$APK_PATH" ]; then
            APK_FILE=$(find $APK_PATH -name "*.apk" | head -1)
            APK_SIZE=$(ls -lh "$APK_FILE" | awk '{print $5}')
            APK_NAME=$(basename "$APK_FILE")
            echo "apk-path=$APK_FILE" >> $GITHUB_OUTPUT
            echo "apk-size=$APK_SIZE" >> $GITHUB_OUTPUT
            echo "apk-name=$APK_NAME" >> $GITHUB_OUTPUT
            echo "üì¶ **${{ matrix.build-type }} APK**: $APK_NAME ($APK_SIZE)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üì± Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mr-comic-${{ needs.validate-release.outputs.version }}-${{ matrix.build-type }}
          path: android/app/build/outputs/apk/${{ matrix.build-type }}/*.apk
          retention-days: 90

  # ============================================================================
  # üéÅ CREATE GITHUB RELEASE
  # ============================================================================
  create-release:
    name: üéÅ Create Release
    runs-on: ubuntu-latest
    needs: [validate-release, full-test-suite, build-release]
    permissions:
      contents: write
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì• Download Release APKs
        uses: actions/download-artifact@v4
        with:
          pattern: mr-comic-${{ needs.validate-release.outputs.version }}-*
          path: release-artifacts
          merge-multiple: false

      - name: üìù Generate Release Notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Get previous tag for changelog
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "## üéâ Mr.Comic $VERSION Release" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          if [ ! -z "$PREVIOUS_TAG" ]; then
            echo "### üìã Changes since $PREVIOUS_TAG" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="feat\|fix\|perf\|refactor" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
          fi
          
          echo "### üì± Available Downloads" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "| APK Type | Description |" >> RELEASE_NOTES.md
          echo "|----------|-------------|" >> RELEASE_NOTES.md
          echo "| **Debug APK** | For testing and development |" >> RELEASE_NOTES.md
          echo "| **Release APK** | Production-ready build |" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          echo "### üõ†Ô∏è Technical Information" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "- **Minimum Android Version**: API 24 (Android 7.0)" >> RELEASE_NOTES.md
          echo "- **Target Android Version**: API 34 (Android 14)" >> RELEASE_NOTES.md
          echo "- **Architecture**: ARM64, ARM, x86_64" >> RELEASE_NOTES.md
          echo "- **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> RELEASE_NOTES.md
          echo "- **Commit**: ${{ github.sha }}" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          echo "### üöÄ Installation Instructions" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "1. Download the appropriate APK file" >> RELEASE_NOTES.md
          echo "2. Enable \"Install from Unknown Sources\" in Android settings" >> RELEASE_NOTES.md
          echo "3. Install the APK file" >> RELEASE_NOTES.md
          echo "4. Grant necessary permissions when prompted" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          if [ "${{ needs.validate-release.outputs.is-prerelease }}" = "true" ]; then
            echo "### ‚ö†Ô∏è Pre-release Notice" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "This is a pre-release version intended for testing purposes." >> RELEASE_NOTES.md
            echo "Please report any issues you encounter." >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
          fi
          
          echo "release-notes<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: "Mr.Comic ${{ needs.validate-release.outputs.version }}"
          body: ${{ steps.release-notes.outputs.release-notes }}
          prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
          files: |
            release-artifacts/**/*.apk
          generate_release_notes: false
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä Release Summary
        run: |
          echo "# üéâ Release ${{ needs.validate-release.outputs.version }} Created!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üì± Available Downloads" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          find release-artifacts -name "*.apk" | while read apk; do
            size=$(ls -lh "$apk" | awk '{print $5}')
            name=$(basename "$apk")
            echo "- **$name** ($size)" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üöÄ **Release available at**: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # üì¢ NOTIFY RELEASE (Optional)
  # ============================================================================
  notify-release:
    name: üì¢ Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: success()
    steps:
      - name: üì¢ Success Notification
        run: |
          echo "# üéâ Release Pipeline Completed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Version**: ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Pre-release**: ${{ needs.validate-release.outputs.is-prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **APKs Built**: Debug + Release" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Tests Passed**: All unit tests" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Quality Checks**: Lint passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üöÄ **Mr.Comic** is ready for users!"