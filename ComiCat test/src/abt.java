// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 


public final class abt
{

    private static byte d[] = {
        -128, 64, 32, 16, 8, 4, 2, 1
    };
    private static int e[] = {
        0x800000, 0x400000, 0x200000, 0x100000, 0x80000, 0x40000, 0x20000, 0x10000, 32768, 16384, 
        8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 
        8, 4, 2, 1
    };
    private static byte f[] = {
        56, 48, 40, 32, 24, 16, 8, 0, 57, 49, 
        41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 
        26, 18, 10, 2, 59, 51, 43, 35, 62, 54, 
        46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 
        29, 21, 13, 5, 60, 52, 44, 36, 28, 20, 
        12, 4, 27, 19, 11, 3
    };
    private static int g[] = {
        1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 
        19, 21, 23, 25, 27, 28
    };
    private static byte h[] = {
        13, 16, 10, 23, 0, 4, 2, 27, 14, 5, 
        20, 9, 22, 18, 11, 3, 25, 7, 15, 6, 
        26, 19, 12, 1, 40, 51, 30, 36, 46, 54, 
        29, 39, 50, 44, 32, 47, 43, 48, 38, 55, 
        33, 52, 45, 41, 49, 35, 28, 31
    };
    private static int i[] = {
        0x1010400, 0, 0x10000, 0x1010404, 0x1010004, 0x10404, 4, 0x10000, 1024, 0x1010400, 
        0x1010404, 1024, 0x1000404, 0x1010004, 0x1000000, 4, 1028, 0x1000400, 0x1000400, 0x10400, 
        0x10400, 0x1010000, 0x1010000, 0x1000404, 0x10004, 0x1000004, 0x1000004, 0x10004, 0, 1028, 
        0x10404, 0x1000000, 0x10000, 0x1010404, 4, 0x1010000, 0x1010400, 0x1000000, 0x1000000, 1024, 
        0x1010004, 0x10000, 0x10400, 0x1000004, 1024, 4, 0x1000404, 0x10404, 0x1010404, 0x10004, 
        0x1010000, 0x1000404, 0x1000004, 1028, 0x10404, 0x1010400, 1028, 0x1000400, 0x1000400, 0, 
        0x10004, 0x10400, 0, 0x1010004
    };
    private static int j[] = {
        0x80108020, 0x80008000, 32768, 0x108020, 0x100000, 32, 0x80100020, 0x80008020, 0x80000020, 0x80108020, 
        0x80108000, 0x80000000, 0x80008000, 0x100000, 32, 0x80100020, 0x108000, 0x100020, 0x80008020, 0, 
        0x80000000, 32768, 0x108020, 0x80100000, 0x100020, 0x80000020, 0, 0x108000, 32800, 0x80108000, 
        0x80100000, 32800, 0, 0x108020, 0x80100020, 0x100000, 0x80008020, 0x80100000, 0x80108000, 32768, 
        0x80100000, 0x80008000, 32, 0x80108020, 0x108020, 32, 32768, 0x80000000, 32800, 0x80108000, 
        0x100000, 0x80000020, 0x100020, 0x80008020, 0x80000020, 0x100020, 0x108000, 0, 0x80008000, 32800, 
        0x80000000, 0x80100020, 0x80108020, 0x108000
    };
    private static int k[] = {
        520, 0x8020200, 0, 0x8020008, 0x8000200, 0, 0x20208, 0x8000200, 0x20008, 0x8000008, 
        0x8000008, 0x20000, 0x8020208, 0x20008, 0x8020000, 520, 0x8000000, 8, 0x8020200, 512, 
        0x20200, 0x8020000, 0x8020008, 0x20208, 0x8000208, 0x20200, 0x20000, 0x8000208, 8, 0x8020208, 
        512, 0x8000000, 0x8020200, 0x8000000, 0x20008, 520, 0x20000, 0x8020200, 0x8000200, 0, 
        512, 0x20008, 0x8020208, 0x8000200, 0x8000008, 512, 0, 0x8020008, 0x8000208, 0x20000, 
        0x8000000, 0x8020208, 8, 0x20208, 0x20200, 0x8000008, 0x8020000, 0x8000208, 520, 0x8020000, 
        0x20208, 8, 0x8020008, 0x20200
    };
    private static int l[] = {
        0x802001, 8321, 8321, 128, 0x802080, 0x800081, 0x800001, 8193, 0, 0x802000, 
        0x802000, 0x802081, 129, 0, 0x800080, 0x800001, 1, 8192, 0x800000, 0x802001, 
        128, 0x800000, 8193, 8320, 0x800081, 1, 8320, 0x800080, 8192, 0x802080, 
        0x802081, 129, 0x800080, 0x800001, 0x802000, 0x802081, 129, 0, 0, 0x802000, 
        8320, 0x800080, 0x800081, 1, 0x802001, 8321, 8321, 128, 0x802081, 129, 
        1, 8192, 0x800001, 8193, 0x802080, 0x800081, 8193, 8320, 0x800000, 0x802001, 
        128, 0x800000, 8192, 0x802080
    };
    private static int m[] = {
        256, 0x2080100, 0x2080000, 0x42000100, 0x80000, 256, 0x40000000, 0x2080000, 0x40080100, 0x80000, 
        0x2000100, 0x40080100, 0x42000100, 0x42080000, 0x80100, 0x40000000, 0x2000000, 0x40080000, 0x40080000, 0, 
        0x40000100, 0x42080100, 0x42080100, 0x2000100, 0x42080000, 0x40000100, 0, 0x42000000, 0x2080100, 0x2000000, 
        0x42000000, 0x80100, 0x80000, 0x42000100, 256, 0x2000000, 0x40000000, 0x2080000, 0x42000100, 0x40080100, 
        0x2000100, 0x40000000, 0x42080000, 0x2080100, 0x40080100, 256, 0x2000000, 0x42080000, 0x42080100, 0x80100, 
        0x42000000, 0x42080100, 0x2080000, 0, 0x40080000, 0x42000000, 0x80100, 0x2000100, 0x40000100, 0x80000, 
        0, 0x40080000, 0x2080100, 0x40000100
    };
    private static int n[] = {
        0x20000010, 0x20400000, 16384, 0x20404010, 0x20400000, 16, 0x20404010, 0x400000, 0x20004000, 0x404010, 
        0x400000, 0x20000010, 0x400010, 0x20004000, 0x20000000, 16400, 0, 0x400010, 0x20004010, 16384, 
        0x404000, 0x20004010, 16, 0x20400010, 0x20400010, 0, 0x404010, 0x20404000, 16400, 0x404000, 
        0x20404000, 0x20000000, 0x20004000, 16, 0x20400010, 0x404000, 0x20404010, 0x400000, 16400, 0x20000010, 
        0x400000, 0x20004000, 0x20000000, 16400, 0x20000010, 0x20404010, 0x404000, 0x20400000, 0x404010, 0x20404000, 
        0, 0x20400010, 16, 16384, 0x20400000, 0x404010, 16384, 0x400010, 0x20004010, 0, 
        0x20404000, 0x20000000, 0x400010, 0x20004010
    };
    private static int o[] = {
        0x200000, 0x4200002, 0x4000802, 0, 2048, 0x4000802, 0x200802, 0x4200800, 0x4200802, 0x200000, 
        0, 0x4000002, 2, 0x4000000, 0x4200002, 2050, 0x4000800, 0x200802, 0x200002, 0x4000800, 
        0x4000002, 0x4200000, 0x4200800, 0x200002, 0x4200000, 2048, 2050, 0x4200802, 0x200800, 2, 
        0x4000000, 0x200800, 0x4000000, 0x200800, 0x200000, 0x4000802, 0x4000802, 0x4200002, 0x4200002, 2, 
        0x200002, 0x4000000, 0x4000800, 0x200000, 0x4200800, 2050, 0x200802, 0x4200800, 2050, 0x4000002, 
        0x4200802, 0x4200000, 0x200800, 0, 2, 0x4200802, 0, 0x200802, 0x4200000, 2048, 
        0x4000002, 0x4000800, 2048, 0x200002
    };
    private static int p[] = {
        0x10001040, 4096, 0x40000, 0x10041040, 0x10000000, 0x10001040, 64, 0x10000000, 0x40040, 0x10040000, 
        0x10041040, 0x41000, 0x10041000, 0x41040, 4096, 64, 0x10040000, 0x10000040, 0x10001000, 4160, 
        0x41000, 0x40040, 0x10040040, 0x10041000, 4160, 0, 0, 0x10040040, 0x10000040, 0x10001000, 
        0x41040, 0x40000, 0x41040, 0x40000, 0x10041000, 4096, 64, 0x10040040, 4096, 0x41040, 
        0x10001000, 64, 0x10000040, 0x10040000, 0x10040040, 0x10000000, 0x40000, 0x10001040, 0, 0x10041040, 
        0x40040, 0x10000040, 0x10040000, 0x10001000, 0x10001040, 0, 0x10041040, 0x41000, 0x41000, 4160, 
        4160, 0x40040, 0x10000000, 0x10041000
    };
    public int a[];
    public int b[];
    private int c[];

    public abt()
    {
        a = new int[32];
        c = new int[32];
        b = new int[2];
    }

    public abt(byte abyte0[])
    {
        a = new int[32];
        c = new int[32];
        b = new int[2];
        byte abyte1[] = new byte[8];
        a(abyte0, abyte1);
        a(abyte1, true, a);
        a(abyte1, false, c);
    }

    private static void a(byte abyte0[], boolean flag, int ai[])
    {
        int ai1[] = new int[56];
        int ai2[] = new int[56];
        int ai3[] = new int[32];
        int i1 = 0;
        while (i1 < 56) 
        {
            int j1 = f[i1];
            if ((abyte0[j1 >>> 3] & d[j1 & 7]) != 0)
            {
                j1 = 1;
            } else
            {
                j1 = 0;
            }
            ai1[i1] = j1;
            i1++;
        }
        for (i1 = 0; i1 < 16; i1++)
        {
            int k1;
            int i2;
            int l2;
            if (flag)
            {
                k1 = i1 << 1;
            } else
            {
                k1 = 15 - i1 << 1;
            }
            l2 = k1 + 1;
            ai3[l2] = 0;
            ai3[k1] = 0;
            i2 = 0;
            while (i2 < 28) 
            {
                int j3 = g[i1] + i2;
                if (j3 < 28)
                {
                    ai2[i2] = ai1[j3];
                } else
                {
                    ai2[i2] = ai1[j3 - 28];
                }
                i2++;
            }
            i2 = 28;
            while (i2 < 56) 
            {
                int k3 = g[i1] + i2;
                if (k3 < 56)
                {
                    ai2[i2] = ai1[k3];
                } else
                {
                    ai2[i2] = ai1[k3 - 28];
                }
                i2++;
            }
            for (int j2 = 0; j2 < 24; j2++)
            {
                if (ai2[h[j2]] != 0)
                {
                    ai3[k1] = ai3[k1] | e[j2];
                }
                if (ai2[h[j2 + 24]] != 0)
                {
                    ai3[l2] = ai3[l2] | e[j2];
                }
            }

        }

        i1 = 0;
        int k2 = 0;
        int l1 = 0;
        for (; i1 < 16; i1++)
        {
            int l3 = k2 + 1;
            int i3 = ai3[k2];
            k2 = l3 + 1;
            l3 = ai3[l3];
            ai[l1] = (0xfc0000 & i3) << 6;
            ai[l1] = ai[l1] | (i3 & 0xfc0) << 10;
            ai[l1] = ai[l1] | (0xfc0000 & l3) >>> 10;
            ai[l1] = ai[l1] | (l3 & 0xfc0) >>> 6;
            l1++;
            ai[l1] = (0x3f000 & i3) << 12;
            ai[l1] = (i3 & 0x3f) << 16 | ai[l1];
            ai[l1] = ai[l1] | (0x3f000 & l3) >>> 4;
            ai[l1] = l3 & 0x3f | ai[l1];
            l1++;
        }

    }

    private static void a(byte abyte0[], byte abyte1[])
    {
        int i1 = 0;
        abyte1[0] = (byte)(abyte0[0] >> 1 & 0xff);
        abyte1[1] = (byte)(((abyte0[0] & 1) << 6 | (abyte0[1] & 0xff) >> 2 & 0xff) & 0xff);
        abyte1[2] = (byte)(((abyte0[1] & 3) << 5 | (abyte0[2] & 0xff) >> 3 & 0xff) & 0xff);
        abyte1[3] = (byte)(((abyte0[2] & 7) << 4 | (abyte0[3] & 0xff) >> 4 & 0xff) & 0xff);
        abyte1[4] = (byte)(((abyte0[3] & 0xf) << 3 | (abyte0[4] & 0xff) >> 5 & 0xff) & 0xff);
        abyte1[5] = (byte)(((abyte0[4] & 0x1f) << 2 | (abyte0[5] & 0xff) >> 6 & 0xff) & 0xff);
        abyte1[6] = (byte)(((abyte0[5] & 0x3f) << 1 | (abyte0[6] & 0xff) >> 7 & 0xff) & 0xff);
        abyte1[7] = (byte)(abyte0[6] & 0x7f);
        for (; i1 < 8; i1++)
        {
            abyte1[i1] = (byte)(abyte1[i1] << 1);
        }

    }

    public static void a(byte abyte0[], int ai[])
    {
        for (int i1 = 0; i1 < 2; i1++)
        {
            ai[i1 + 0] = (abyte0[i1 * 4 + 0] & 0xff) << 24 | (abyte0[i1 * 4 + 0 + 1] & 0xff) << 16 | (abyte0[i1 * 4 + 0 + 2] & 0xff) << 8 | abyte0[i1 * 4 + 0 + 3] & 0xff;
        }

    }

    public static void a(int ai[], byte abyte0[])
    {
        for (int i1 = 0; i1 < 2; i1++)
        {
            abyte0[i1 * 4 + 0] = (byte)(ai[i1 + 0] >>> 24);
            abyte0[i1 * 4 + 0 + 1] = (byte)(ai[i1 + 0] >>> 16);
            abyte0[i1 * 4 + 0 + 2] = (byte)(ai[i1 + 0] >>> 8);
            abyte0[i1 * 4 + 0 + 3] = (byte)ai[i1 + 0];
        }

    }

    public static void a(int ai[], int ai1[], int ai2[])
    {
        int j1 = ai[0];
        int i1 = ai[1];
        int k1 = (j1 >>> 4 ^ i1) & 0xf0f0f0f;
        i1 ^= k1;
        j1 ^= k1 << 4;
        k1 = (j1 >>> 16 ^ i1) & 0xffff;
        i1 ^= k1;
        j1 ^= k1 << 16;
        k1 = (i1 >>> 2 ^ j1) & 0x33333333;
        j1 ^= k1;
        k1 = i1 ^ k1 << 2;
        int l1 = (k1 >>> 8 ^ j1) & 0xff00ff;
        i1 = j1 ^ l1;
        j1 = k1 ^ l1 << 8;
        j1 = j1 >>> 31 & 1 | j1 << 1;
        l1 = (i1 ^ j1) & 0xaaaaaaaa;
        i1 ^= l1;
        k1 = i1 >>> 31 & 1 | i1 << 1;
        i1 = j1 ^ l1;
        l1 = 0;
        for (j1 = 0; j1 < 8; j1++)
        {
            int i2 = l1 + 1;
            l1 = ai2[l1] ^ (i1 << 28 | i1 >>> 4);
            int j2 = o[l1 & 0x3f];
            int k2 = m[l1 >>> 8 & 0x3f];
            int l2 = k[l1 >>> 16 & 0x3f];
            int i3 = i[l1 >>> 24 & 0x3f];
            l1 = i2 + 1;
            i2 = ai2[i2] ^ i1;
            k1 ^= i3 | (j2 | k2 | l2) | p[i2 & 0x3f] | n[i2 >>> 8 & 0x3f] | l[i2 >>> 16 & 0x3f] | j[i2 >>> 24 & 0x3f];
            i2 = l1 + 1;
            l1 = (k1 << 28 | k1 >>> 4) ^ ai2[l1];
            j2 = o[l1 & 0x3f];
            k2 = m[l1 >>> 8 & 0x3f];
            l2 = k[l1 >>> 16 & 0x3f];
            i3 = i[l1 >>> 24 & 0x3f];
            l1 = i2 + 1;
            i2 = ai2[i2] ^ k1;
            i1 ^= j2 | k2 | l2 | i3 | p[i2 & 0x3f] | n[i2 >>> 8 & 0x3f] | l[i2 >>> 16 & 0x3f] | j[i2 >>> 24 & 0x3f];
        }

        i1 = i1 << 31 | i1 >>> 1;
        j1 = (k1 ^ i1) & 0xaaaaaaaa;
        k1 ^= j1;
        i1 ^= j1;
        j1 = k1 << 31 | k1 >>> 1;
        k1 = (j1 >>> 8 ^ i1) & 0xff00ff;
        i1 ^= k1;
        j1 ^= k1 << 8;
        k1 = (j1 >>> 2 ^ i1) & 0x33333333;
        i1 ^= k1;
        j1 ^= k1 << 2;
        k1 = (i1 >>> 16 ^ j1) & 0xffff;
        j1 ^= k1;
        i1 ^= k1 << 16;
        k1 = (i1 >>> 4 ^ j1) & 0xf0f0f0f;
        ai1[0] = i1 ^ k1 << 4;
        ai1[1] = j1 ^ k1;
    }

}
